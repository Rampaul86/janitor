<?xml version="1.0" encoding="UTF-8"?>
<quartz xmlns="http://quartznet.sourceforge.net/JobSchedulingData"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 				version="1.0"
				overwrite-existing-jobs="true">
  
  
  <!-- 
      this example shows we can use calendars: for example, never run job XX on
      holidays in a given calendar.
  -->
  <calendar type="Quartz.Impl.Calendar.AnnualCalendar, Quartz" replace="false">
    <name>cal1</name>
    <description>description0</description>
    <base-calendar type="Quartz.Impl.Calendar.WeeklyCalendar, Quartz" replace="false">
      <name>name1</name>
      <description>description1</description>
    </base-calendar>
  </calendar>

  <calendar type="Quartz.Impl.Calendar.AnnualCalendar, Quartz" replace="false">
    <name>cal2</name>
    <description>description0</description>
    <base-calendar type="Quartz.Impl.Calendar.WeeklyCalendar, Quartz" replace="false">
      <name>name1</name>
      <description>description1</description>
    </base-calendar>
  </calendar>

  
  <!--  
  We run BirthDayJob every minute with the CronTrigger. 
  
  Couple of explanations:
    - a <job> has a <job-detail> and <trigger>.
    
    - <job-detail> contains a job-name, job-group, description, and most importantly
                   where the class resides:  Namespace.ClassName, dllname-without-.dll-suffix
    
    - <trigger> is of type <cron>.
    
    - make sure job-name and job-group match the required job we want to trigger.
    
    - uses a UNIX cron expression (see help files).
  -->
  <job>
    <job-detail>
      <name>BirthDayJob</name>
      <group>jobGroup2</group>
      <description>jobDesciption2</description>
      <job-type>Jobs.HelloWorldJob, jobs</job-type>
    </job-detail>

    <trigger>
      <cron>
        <name>EveryDayAt0100</name>
        <group>EveryDayAt0100</group>
        <job-name>BirthDayJob</job-name>
        <job-group>jobGroup2</job-group>
        <cron-expression>0 * * * * ? </cron-expression>
      </cron>
    </trigger>
  </job>
  
  
  
  
  
  
  
  <!-- this example uses a 'simple' trigger. this trigger is not periodic. -->
  
  <job>
    <job-detail>
      <name>jobName1</name>
      <group>jobGroup1</group>
      <description>jobDesciption1</description>
      <job-type>Jobs.HelloWorldJob, jobs</job-type>
      <volatile>false</volatile>
      <durable>true</durable>
      <recover>false</recover>
      <job-data-map>
        <entry>
          <key>key0</key>
          <value>value0</value>
        </entry>
        <entry>
          <key>key1</key>
          <value>value1</value>
        </entry>
        <entry>
          <key>key2</key>
          <value>value2</value>
        </entry>
      </job-data-map>
    </job-detail>

    <trigger>
      <simple>
        <name>simpleName</name>
        <group>simpleGroup</group>
        <description>SimpleTriggerDescription</description>
        <misfire-instruction>SmartPolicy</misfire-instruction>
        <calendar-name>cal1</calendar-name>
        <volatile>false</volatile>
        <job-name>jobName1</job-name>
        <job-group>jobGroup1</job-group>
        <start-time>1982-06-28T18:15:00.0Z</start-time>
        <end-time>2010-05-04T18:13:51.0Z</end-time>
        <repeat-count>100</repeat-count>
        <repeat-interval>3000</repeat-interval>
      </simple>
    </trigger>

  </job>
</quartz>

